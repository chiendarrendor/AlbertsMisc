           ================ SmallProf version 2.02 ================
                              Profile of edit.pl                       Page 1
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000     1:
        0   0.00000   0.00000     2:# the output of this is a hashref of two
        0   0.00000   0.00000     3:# { DISTANCE=>d , DELTAS=>[ <changes> ] }
        0   0.00000   0.00000     4:# DELTAS consist of:
        0   0.00000   0.00000     5:# 'S<char>' -- characters are identical in
        0   0.00000   0.00000     6:# 'I<char>' -- a character appears in $s2
        0   0.00000   0.00000     7:# 'D<char>' -- a character appears in $s1
        0   0.00000   0.00000     8:# 'T<char1><char2>' char is char 1 in s1,
        0   0.00000   0.00000     9:sub LevenshteinDistance
        0   0.00000   0.00000    10:{
        1   0.00000   0.00000    11:    my ($s1,$s2) = @_;
        1   0.00000   0.00000    12:    my %ldmemo;
        1   0.00000   0.00000    13:    my $result =
        0   0.00000   0.00000    14:
        1   0.00034   0.00000    15:    print "memo size: ",scalar keys
        1   0.00000   0.00000    16:    return $result;
        0   0.00000   0.00000    17:}
        0   0.00000   0.00000    18:
        0   0.00000   0.00000    19:
        0   0.00000   0.00000    20:sub LevenshteinDistanceR
        0   0.00000   0.00000    21:{
   201367   0.02017   0.57500    22:    my ($ldmemo,$s1,$s1loc,$s2,$s2loc) = @_;
        0   0.00000   0.00000    23:
   201367   0.00637   0.60800    24:    if (exists $ldmemo->{$s1loc,$s2loc})
        0   0.00000   0.00000    25:    {
        0   0.00000   0.00000    26: my $result = $ldmemo->{$s1loc,$s2loc};
        0   0.00000   0.00000    27:
        0   0.00000   0.00000    28: return $result;
        0   0.00000   0.00000    29:    }
        0   0.00000   0.00000    30:
   201367   0.00218   0.54400    31:    my $l1 = length($s1);
   201367   0.00200   0.56100    32:    my $l2 = length($s2);
        0   0.00000   0.00000    33:
   201367   0.00217   0.66900    34:    if ($l1 == 0)
        0   0.00000   0.00000    35:    {
    58728   0.00072   0.15600    36: my $changes = [];
    58728   0.00957   0.20200    37: for (my $i = 0 ; $i < $l2 ; ++$i)
        0   0.00000   0.00000    38: {
        0   0.00000   0.00000    39:     push @$changes,"I".substr($s2,$i,1);
    58728   0.00056   0.17200    40: }
        0   0.00000   0.00000    41:
    58728   0.00555   0.29300    42: my $result = {
        0   0.00000   0.00000    43:# $ldmemo->{$s1loc,$s2loc} = $result;
        0   0.00000   0.00000    44:
    58728   0.00305   0.21900    45: return $result;
        0   0.00000   0.00000    46:    }
        0   0.00000   0.00000    47:
   142639   0.00112   0.32600    48:    if ($l2 == 0)
        0   0.00000   0.00000    49:    {
    75517   0.00128   0.30100    50: my $changes = [];
    75517   0.04853   0.37000    51: for (my $i = 0 ; $i < $l1 ; ++$i)
        0   0.00000   0.00000    52: {
        0   0.00000   0.00000    53:     push @$changes,"D".substr($s1,$i,1);
    75517   0.00098   0.23700    54: }
        0   0.00000   0.00000    55:
    75517   0.00739   0.26400    56: my $result = {
           ================ SmallProf version 2.02 ================
                              Profile of edit.pl                       Page 2
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000    57:# $ldmemo->{$s1loc,$s2loc} = $result;
    75517   0.00371   0.29800    58: return $result;
        0   0.00000   0.00000    59:    }
        0   0.00000   0.00000    60:
    67122   0.00066   0.23400    61:    my $c1 = substr($s1,0,1);
    67122   0.00065   0.18400    62:    my $c2 = substr($s2,0,1);
        0   0.00000   0.00000    63:
    67122   0.00166   0.17500    64:    my $opt1 = LevenshteinDistanceR(
        0   0.00000   0.00000    65: $ldmemo,
        0   0.00000   0.00000    66: substr($s1,1), $s1loc + 1,
        0   0.00000   0.00000    67: $s2 , $s2loc,
        0   0.00000   0.00000    68: ) ;
    67122   0.00108   0.25200    69:    $opt1->{ND} = $opt1->{DISTANCE}+1;
    67122   0.00093   0.21700    70:    $opt1->{PREFIX} = "D" . $c1;
        0   0.00000   0.00000    71:
    67122   0.00161   0.14100    72:    my $opt2 = LevenshteinDistanceR(
        0   0.00000   0.00000    73: $ldmemo,
        0   0.00000   0.00000    74: $s1, $s1loc,
        0   0.00000   0.00000    75: substr($s2,1) , $s2loc+1,
        0   0.00000   0.00000    76: ) ;
        0   0.00000   0.00000    77:
    67122   0.00144   0.20400    78:    $opt2->{ND} = $opt2->{DISTANCE} + 1;
    67122   0.00071   0.18600    79:    $opt2->{PREFIX} = "I" . $c2;
        0   0.00000   0.00000    80:
    67122   0.00758   0.28300    81:    my $opt3 = LevenshteinDistanceR(
        0   0.00000   0.00000    82: $ldmemo,
        0   0.00000   0.00000    83: substr($s1,1), $s1loc+1,
        0   0.00000   0.00000    84: substr($s2,1), $s2loc+1,
        0   0.00000   0.00000    85: ) ;
        0   0.00000   0.00000    86:
    67122   0.00053   0.17300    87:    if ($c1 eq $c2)
        0   0.00000   0.00000    88:    {
    26489   0.00031   0.12600    89: $opt3->{ND} = $opt3->{DISTANCE};
    26489   0.00045   0.09200    90: $opt3->{PREFIX} = "S" . $c1;
        0   0.00000   0.00000    91:    }
        0   0.00000   0.00000    92:    else
        0   0.00000   0.00000    93:    {
    40633   0.00069   0.17300    94: $opt3->{ND} = $opt3->{DISTANCE} + 1;
    40633   0.00141   0.20400    95: $opt3->{PREFIX} = "T" . $c1 . $c2;
        0   0.00000   0.00000    96:    }
        0   0.00000   0.00000    97:
    67122   0.06107   0.24900    98:    my @opts = sort { $a->{ND} <=> $b->{ND} }
        0   0.00000   0.00000    99:
    67122   0.00079   0.32600   100:    my $changes = [];
    67122   0.00191   0.13700   101:    push @$changes,$opts[0]->{PREFIX};
    67122   0.00281   0.18700   102:    push @$changes,@{$opts[0]->{DELTAS}};
        0   0.00000   0.00000   103:
    67122   0.00840   0.17200   104:    my $result = {
        0   0.00000   0.00000   105: DISTANCE=>$opts[0]->{ND},
        0   0.00000   0.00000   106: DELTAS=>$changes
        0   0.00000   0.00000   107:    };
        0   0.00000   0.00000   108:
        0   0.00000   0.00000   109:
        0   0.00000   0.00000   110:#    $ldmemo->{$s1loc,$s2loc} = $result;
        0   0.00000   0.00000   111:
    67122   0.05276   0.26800   112:    return $result;
           ================ SmallProf version 2.02 ================
                              Profile of edit.pl                       Page 3
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000   113:
        0   0.00000   0.00000   114:}
        0   0.00000   0.00000   115:
        0   0.00000   0.00000   116:sub OpDelta
        0   0.00000   0.00000   117:{
        2   0.00000   0.00000   118:    my ($ary,$which) = @_;
        2   0.00000   0.00000   119:    my $result = "";
        0   0.00000   0.00000   120:
        2   0.00000   0.00000   121:    for my $i (@$ary)
        0   0.00000   0.00000   122:    {
       20   0.00000   0.00000   123: my $t = substr($i,0,1);
       20   0.00000   0.00000   124: if ($t eq 'S') { $result .= substr($i,1,1);
        0   0.00000   0.00000   125: elsif($t eq 'D')
        0   0.00000   0.00000   126: {
        8   0.00000   0.00000   127:     $result .= "-" if $which == 2;
        8   0.00000   0.00000   128:     $result .= substr($i,1,1) if $which ==
        0   0.00000   0.00000   129: }
        0   0.00000   0.00000   130: elsif($t eq 'I')
        0   0.00000   0.00000   131: {
        0   0.00000   0.00000   132:     $result .= "-" if $which == 1;
        0   0.00000   0.00000   133:     $result .= substr($i,1,1) if $which ==
        0   0.00000   0.00000   134: }
        0   0.00000   0.00000   135: else
        0   0.00000   0.00000   136: {
        2   0.00000   0.00000   137:     $result .= substr($i,1,1) if $which ==
        2   0.00000   0.00000   138:     $result .= substr($i,2,1) if $which ==
        0   0.00000   0.00000   139: }
        0   0.00000   0.00000   140:
        0   0.00000   0.00000   141:    }
        0   0.00000   0.00000   142:
        2   0.00041   0.00000   143:    return $result;
        0   0.00000   0.00000   144:}
        0   0.00000   0.00000   145:
        0   0.00000   0.00000   146:
        0   0.00000   0.00000   147:
        0   0.00000   0.00000   148:
        0   0.00000   0.00000   149:
        0   0.00000   0.00000   150:
        0   0.00000   0.00000   151:# ------------------ main -------------
        0   0.00000   0.00000   152:
        1   0.00000   0.00000   153:die("bad command line") unless @ARGV;
        1   0.00016   0.00000   154:open(FD,$ARGV[0]) || die("can't open file");
        1   0.00002   0.00000   155:$str1 = <FD>;
        1   0.00000   0.00000   156:$str1 =~ s/\r?\n$//;
        1   0.00000   0.00000   157:$str2 = <FD>;
        1   0.00000   0.00000   158:$str2 =~ s/\r?\n$//;
        1   0.00001   0.00000   159:close FD;
        0   0.00000   0.00000   160:
        0   0.00000   0.00000   161:
        1   0.00000   0.00000   162:my $ld = LevenshteinDistance($str1,$str2);
        1   0.00020   0.00000   163:print $ld->{DISTANCE},"\n";
        1   0.00000   0.00000   164:print OpDelta($ld->{DELTAS},1),"\n";
        1   0.00000   0.00000   165:print OpDelta($ld->{DELTAS},2),"\n";
        0   0.00000   0.00000   166:
        0   0.00000   0.00000   167:
        0   0.00000   0.00000   168:
           ================ SmallProf version 2.02 ================
                              Profile of edit.pl                       Page 4
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000   169:
        0   0.00000   0.00000   170:
        0   0.00000   0.00000   171:
        0   0.00000   0.00000   172:
        0   0.00000   0.00000   173:
        0   0.00000   0.00000   174:
