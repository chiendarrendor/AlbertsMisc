           ================ SmallProf version 2.02 ================
                        Profile of ../common/STEdge.pm                 Page 1
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000     1:package STEdge;
        0   0.00000   0.00000     2:
        0   0.00000   0.00000     3:use SubString;
        0   0.00000   0.00000     4:
        0   0.00000   0.00000     5:
        0   0.00000   0.00000     6:sub new
        0   0.00000   0.00000     7:{
    62709   0.00297   0.11100     8:    my ($class,$str,$child) = @_;
    62709   0.01031   0.20400     9:    my $this = {};
    62709   0.00255   0.14200    10:    bless $this,$class;
    62709   0.00408   0.21900    11:    $this->{STRING} = $str;
    62709   0.00212   0.12400    12:    $this->{CHILD} = $child if $child;
    62709   0.01116   0.20400    13:    return $this;
        0   0.00000   0.00000    14:}
        0   0.00000   0.00000    15:
        0   0.00000   0.00000    16:# returns 0 if there is no initial overlap
        0   0.00000   0.00000    17:# the given string and this edge's string
        0   0.00000   0.00000    18:# otherwise,
        0   0.00000   0.00000    19:# a) if we are a terminal thus:
        0   0.00000   0.00000    20:#    AB$
        0   0.00000   0.00000    21:#    and ABC$ arrives
        0   0.00000   0.00000    22:#    result should be:
        0   0.00000   0.00000    23:#    AB
        0   0.00000   0.00000    24:#      $
        0   0.00000   0.00000    25:#      C$
        0   0.00000   0.00000    26:#    if we are a terminal thus:
        0   0.00000   0.00000    27:#    AB$
        0   0.00000   0.00000    28:#    and A$ arrives
        0   0.00000   0.00000    29:#    result should be
        0   0.00000   0.00000    30:#    A
        0   0.00000   0.00000    31:#       B$
        0   0.00000   0.00000    32:#       $
        0   0.00000   0.00000    33:
        0   0.00000   0.00000    34:# b) if we are non-terminal
        0   0.00000   0.00000    35:#    AB <child node>
        0   0.00000   0.00000    36:#    b1)
        0   0.00000   0.00000    37:#    if ABC$ arrives, C$ should be handled by
        0   0.00000   0.00000    38:#    if AC$ arrives:
        0   0.00000   0.00000    39:#    A
        0   0.00000   0.00000    40:#     <new child node>
        0   0.00000   0.00000    41:#        B <child node>
        0   0.00000   0.00000    42:#        C$
        0   0.00000   0.00000    43:
        0   0.00000   0.00000    44:
        0   0.00000   0.00000    45:sub ProcessNewString
        0   0.00000   0.00000    46:{
   694181   0.02947   2.38900    47:    my ($this,$string) = @_;
   694181   0.02701   1.71000    48:    my $idx = 0;
        0   0.00000   0.00000    49:
   694181   0.03122   2.16100    50:    my $slen = $string->Length()-1;
   694181   0.05324   2.30700    51:    my $llen = $this->{STRING}->Length() -
   694181   0.03031   2.21000    52:    my $maxlen = $slen < $llen ? $slen :
        0   0.00000   0.00000    53:
        0   0.00000   0.00000    54:
   694181   0.02569   2.04500    55:    while($idx < $maxlen)
        0   0.00000   0.00000    56:    {
           ================ SmallProf version 2.02 ================
                        Profile of ../common/STEdge.pm                 Page 2
       =================================================================
    count wall tm  cpu time line
   687430   0.03471   2.15400    57: last unless $string->GetCharAt($idx) eq
        0   0.00000   0.00000    58:     $this->{STRING}->GetCharAt($idx);
   263275   0.01270   0.98800    59: ++$idx;
        0   0.00000   0.00000    60:    }
        0   0.00000   0.00000    61:    # invariant: $idx is now the count of
        0   0.00000   0.00000    62:    # letters that overlap betwee $this-
        0   0.00000   0.00000    63:    # (not including a '$'
   694181   0.06355   2.39900    64:    return 0 if $idx == 0;
        0   0.00000   0.00000    65:
        0   0.00000   0.00000    66:    # ok...so now there's some overlap
        0   0.00000   0.00000    67:    # easy case.  if we're a terminal, the
        0   0.00000   0.00000    68:    # will be that this edge now contains the
        0   0.00000   0.00000    69:    # and point to a new node that contains
        0   0.00000   0.00000    70:    # terminal substrings.
   255379   0.01273   0.67000    71:    if (!exists $this->{CHILD})
        0   0.00000   0.00000    72:    {
    20938   0.00095   0.01600    73: my $common = $string->SubSubString(0,$idx);
    20938   0.00079   0.07700    74: my $sub1 = $string->SubStringToEnd($idx);
    20938   0.00112   0.09200    75: my $sub2 = $this->{STRING}-
        0   0.00000   0.00000    76:
    20938   0.00457   0.06200    77: $this->{STRING} = $common;
    20938   0.00252   0.04700    78: $this->{CHILD} = new STNode();
    20938   0.00195   0.04600    79: $this->{CHILD}->AddEdge($sub1);
    20938   0.00134   0.07700    80: $this->{CHILD}->AddEdge($sub2);
    20938   0.00381   0.09300    81: return 1;
        0   0.00000   0.00000    82:    }
        0   0.00000   0.00000    83:
        0   0.00000   0.00000    84:    # ok, if we get here, we're a non-
        0   0.00000   0.00000    85:    # another easy case.  if the length of
        0   0.00000   0.00000    86:    # our entire length, then let our child
   234441   0.01187   0.70300    87:    if ($llen eq $idx)
        0   0.00000   0.00000    88:    {
   231337   0.01677   0.81000    89: $this->{CHILD}->ProcessNewString($string-
   231337   0.02399   0.64200    90: return 1;
        0   0.00000   0.00000    91:    }
        0   0.00000   0.00000    92:
        0   0.00000   0.00000    93:    # ok...if we get here, we're not a
        0   0.00000   0.00000    94:    # the overlap is only part of us.
        0   0.00000   0.00000    95:    # so, originally:
        0   0.00000   0.00000    96:    # <my string> -> child node
        0   0.00000   0.00000    97:    # + new string
        0   0.00000   0.00000    98:    #
        0   0.00000   0.00000    99:    # new:
        0   0.00000   0.00000   100:    # <shared prefix> -> new node
        0   0.00000   0.00000   101:    #    new node:
        0   0.00000   0.00000   102:    #         <unique suffix of my string> ->
        0   0.00000   0.00000   103:    #         <unique suffix of new string
        0   0.00000   0.00000   104:    #
     3104   0.00044   0.00000   105:    my $prefix = $this->{STRING}-
     3104   0.00020   0.01600   106:    my $mysuffix = $this->{STRING}-
     3104   0.00015   0.00000   107:    my $newsuffix = $string-
     3104   0.00042   0.01500   108:    $nn = new STNode();
     3104   0.00058   0.01500   109:    $nn->AddEdge($mysuffix,$this->{CHILD});
     3104   0.00021   0.00000   110:    $nn->AddEdge($newsuffix);
     3104   0.00030   0.00000   111:    $this->{CHILD} = $nn;
     3104   0.00081   0.01600   112:    $this->{STRING} = $prefix;
           ================ SmallProf version 2.02 ================
                        Profile of ../common/STEdge.pm                 Page 3
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000   113:
     3104   0.00044   0.01600   114:    return 1;
        0   0.00000   0.00000   115:}
        0   0.00000   0.00000   116:
        0   0.00000   0.00000   117:sub Print
        0   0.00000   0.00000   118:{
        0   0.00000   0.00000   119:    my ($this,$indent) = @_;
        0   0.00000   0.00000   120:    print $indent,$this->{STRING}-
        0   0.00000   0.00000   121:    $this->{CHILD}->Print($indent . "\t") if
        0   0.00000   0.00000   122:}
        0   0.00000   0.00000   123:
        0   0.00000   0.00000   124:sub PrintAllEdges
        0   0.00000   0.00000   125:{
        0   0.00000   0.00000   126:    my ($this) = @_;
        0   0.00000   0.00000   127:    print $this->{STRING}->ToString(),"\n";
        0   0.00000   0.00000   128:    $this->{CHILD}->PrintAllEdges() if exists
        0   0.00000   0.00000   129:}
        0   0.00000   0.00000   130:
        0   0.00000   0.00000   131:sub FindCommonSubstrings
        0   0.00000   0.00000   132:{
        0   0.00000   0.00000   133:    my ($this,$prefix,$resref) = @_;
        0   0.00000   0.00000   134:    return unless exists $this->{CHILD};
        0   0.00000   0.00000   135:    my $string;
        0   0.00000   0.00000   136:    if ($prefix)
        0   0.00000   0.00000   137:    {
        0   0.00000   0.00000   138: $string = new SubString($this->{STRING}-
        0   0.00000   0.00000   139:    $this->{STRING}->{FIRST} - $prefix-
        0   0.00000   0.00000   140:    $prefix->Length() + $this->{STRING}-
        0   0.00000   0.00000   141:    }
        0   0.00000   0.00000   142:    else
        0   0.00000   0.00000   143:    {
        0   0.00000   0.00000   144: $string = $this->{STRING};
        0   0.00000   0.00000   145:    }
        0   0.00000   0.00000   146:
        0   0.00000   0.00000   147:    my $count = $this->{CHILD}-
        0   0.00000   0.00000   148:    push @$resref,[$string,$count];
        0   0.00000   0.00000   149:    $this->{CHILD}-
        0   0.00000   0.00000   150:}
        0   0.00000   0.00000   151:
        0   0.00000   0.00000   152:sub GetLeafCount
        0   0.00000   0.00000   153:{
        0   0.00000   0.00000   154:    my ($this) = @_;
        0   0.00000   0.00000   155:    return 1 unless exists $this->{CHILD};
        0   0.00000   0.00000   156:    return $this->{CHILD}->GetLeafCount();
        0   0.00000   0.00000   157:}
        0   0.00000   0.00000   158:
        0   0.00000   0.00000   159:sub CountByLength
        0   0.00000   0.00000   160:{
    62709   0.00249   0.23400   161:    my ($this) = @_;
    62709   0.00499   0.20600   162:    my $mylen = $this->{STRING}->Length();
        0   0.00000   0.00000   163:
    62709   0.00884   0.21500   164:    return $mylen - 1 unless exists $this-
    24042   0.00227   0.07900   165:    return $mylen + $this->{CHILD}-
        0   0.00000   0.00000   166:}
        0   0.00000   0.00000   167:
        0   0.00000   0.00000   168:
           ================ SmallProf version 2.02 ================
                        Profile of ../common/STEdge.pm                 Page 4
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000   169:1;
           ================ SmallProf version 2.02 ================
                     Profile of ../common/StringWrapper.pm             Page 5
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000     1:package StringWrapper;
        0   0.00000   0.00000     2:
        0   0.00000   0.00000     3:sub new
        0   0.00000   0.00000     4:{
        1   0.00004   0.00000     5:    my ($class,$str) = @_;
        1   0.00000   0.00000     6:    my $this = [];
        1   0.00000   0.00000     7:    bless $this,$class;
        1   0.02034   0.01500     8:    @$this = split("",$str);
        1   0.00000   0.00000     9:    return $this;
        0   0.00000   0.00000    10:}
        0   0.00000   0.00000    11:
        0   0.00000   0.00000    12:sub Length
        0   0.00000   0.00000    13:{
    77335   0.00319   0.17100    14:    my ($this) = @_;
    77335   0.01091   0.22000    15:    return scalar @$this;
        0   0.00000   0.00000    16:}
        0   0.00000   0.00000    17:
        0   0.00000   0.00000    18:sub GetCharAt
        0   0.00000   0.00000    19:{
  1374860   0.05889   4.09800    20:    my ($this,$index) = @_;
  1374860   0.33529   5.03900    21:    return $this->[$index];
        0   0.00000   0.00000    22:}
        0   0.00000   0.00000    23:
        0   0.00000   0.00000    24:1;
           ================ SmallProf version 2.02 ================
                       Profile of ../common/SubString.pm               Page 6
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000     1:# this class mimics a string, except that it
        0   0.00000   0.00000     2:# references a constant StringWrapper string
        0   0.00000   0.00000     3:package SubString;
        0   0.00000   0.00000     4:
        0   0.00000   0.00000     5:sub new
        0   0.00000   0.00000     6:{
   342130   0.01654   0.99600     7:    my ($class,$string,$first,$length) = @_;
        0   0.00000   0.00000     8:
   342130   0.02515   0.87200     9:    my $this = {};
   342130   0.01551   0.97100    10:    bless $this,$class;
   342130   0.02961   1.02300    11:    $this->{STRING} = $string;
   342130   0.01835   1.04900    12:    $this->{FIRST} = $first;
   342130   0.01963   0.90400    13:    $this->{LENGTH} = $length;
   342130   0.07380   1.14600    14:    return $this;
        0   0.00000   0.00000    15:}
        0   0.00000   0.00000    16:
        0   0.00000   0.00000    17:sub Length
        0   0.00000   0.00000    18:{
  1451071   0.05764   4.66900    19:    my ($this) = @_;
  1451071   0.21070   4.81000    20:    return $this->{LENGTH};
        0   0.00000   0.00000    21:}
        0   0.00000   0.00000    22:
        0   0.00000   0.00000    23:sub GetCharAt
        0   0.00000   0.00000    24:{
  1374860   0.05946   4.50200    25:    my ($this,$index) = @_;
  1374860   0.13663   4.93700    26:    return $this->{STRING}->GetCharAt($this-
        0   0.00000   0.00000    27:}
        0   0.00000   0.00000    28:
        0   0.00000   0.00000    29:sub SubSubString
        0   0.00000   0.00000    30:{
    24042   0.00170   0.10700    31:    my ($this,$index,$length) = @_;
    24042   0.00372   0.06400    32:    return new SubString($this-
        0   0.00000   0.00000    33:}
        0   0.00000   0.00000    34:
        0   0.00000   0.00000    35:sub SubStringToEnd
        0   0.00000   0.00000    36:{
   279421   0.01146   0.81100    37:    my ($this,$index) = @_;
   279421   0.05124   1.03200    38:    return new SubString($this-
        0   0.00000   0.00000    39:    $this->{LENGTH} - $index);
        0   0.00000   0.00000    40:}
        0   0.00000   0.00000    41:
        0   0.00000   0.00000    42:
        0   0.00000   0.00000    43:
        0   0.00000   0.00000    44:sub ToString
        0   0.00000   0.00000    45:{
        0   0.00000   0.00000    46:    my ($this) = @_;
        0   0.00000   0.00000    47:    my $result;
        0   0.00000   0.00000    48:    for (my $i = 0 ; $i < $this->{LENGTH} ;
        0   0.00000   0.00000    49:    {
        0   0.00000   0.00000    50: $result .= $this->GetCharAt($i);
        0   0.00000   0.00000    51:    }
        0   0.00000   0.00000    52:    return $result;
        0   0.00000   0.00000    53:}
        0   0.00000   0.00000    54:
        0   0.00000   0.00000    55:
        0   0.00000   0.00000    56:1;
           ================ SmallProf version 2.02 ================
                      Profile of ../common/SuffixTree.pm               Page 7
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000     1:package SuffixTree;
        0   0.00000   0.00000     2:use StringWrapper;
        0   0.00000   0.00000     3:use SubString;
        0   0.00000   0.00000     4:
        0   0.00000   0.00000     5:sub new
        0   0.00000   0.00000     6:{
        1   0.00000   0.00000     7:    my ($class,$stringwrapper) = @_;
        1   0.00000   0.00000     8:    my $this = {};
        1   0.00000   0.00000     9:    bless $this,$class;
        0   0.00000   0.00000    10:
        0   0.00000   0.00000    11:    # initial state of tree
        1   0.00000   0.00000    12:    $this->{ROOT} = new STNode();
        1   0.00000   0.00000    13:    $this->{ROOT}->AddEdge(new
        0   0.00000   0.00000    14:
        1   0.00000   0.00000    15:    print "len:",$stringwrapper-
        0   0.00000   0.00000    16:
        1   0.00000   0.00000    17:    for (my $i = 0 ; $i < $stringwrapper-
        0   0.00000   0.00000    18:    {
    38666   0.01354   0.06200    19: print $i,"\n" if ($i%1000 == 0) ;
    38666   0.00208   0.14300    20: my $ss = new
    38666   0.00261   0.18800    21: $this->{ROOT}->ProcessNewString($ss);
        1   0.00000   0.00000    22:    }
        1   0.00000   0.00000    23:    return $this;
        0   0.00000   0.00000    24:}
        0   0.00000   0.00000    25:
        0   0.00000   0.00000    26:sub CountByLength
        0   0.00000   0.00000    27:{
        1   0.00000   0.00000    28:    my ($this) = @_;
        1   0.00000   0.00000    29:    return $this->{ROOT}->CountByLength();
        0   0.00000   0.00000    30:}
        0   0.00000   0.00000    31:
        0   0.00000   0.00000    32:sub Print
        0   0.00000   0.00000    33:{
        0   0.00000   0.00000    34:    my ($this) = @_;
        0   0.00000   0.00000    35:    $this->{ROOT}->Print("");
        0   0.00000   0.00000    36:}
        0   0.00000   0.00000    37:
        0   0.00000   0.00000    38:sub PrintAllEdges
        0   0.00000   0.00000    39:{
        0   0.00000   0.00000    40:    my ($this) = @_;
        0   0.00000   0.00000    41:    $this->{ROOT}->PrintAllEdges();
        0   0.00000   0.00000    42:}
        0   0.00000   0.00000    43:
        0   0.00000   0.00000    44:sub FindCommonSubstrings
        0   0.00000   0.00000    45:{
        0   0.00000   0.00000    46:    my ($this) = @_;
        0   0.00000   0.00000    47:    my $result = [];
        0   0.00000   0.00000    48:    $this->{ROOT}-
        0   0.00000   0.00000    49:    return $result;
        0   0.00000   0.00000    50:}
        0   0.00000   0.00000    51:
        0   0.00000   0.00000    52:package STNode;
        0   0.00000   0.00000    53:
        0   0.00000   0.00000    54:use STEdge;
        0   0.00000   0.00000    55:
        0   0.00000   0.00000    56:sub new
           ================ SmallProf version 2.02 ================
                      Profile of ../common/SuffixTree.pm               Page 8
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000    57:{
    24043   0.00099   0.04700    58:    my ($class) = @_;
    24043   0.00211   0.06300    59:    my $this = {};
    24043   0.00145   0.04600    60:    bless $this,$class;
    24043   0.00639   0.14200    61:    $this->{EDGES} = [];
    24043   0.00246   0.09500    62:    return $this;
        0   0.00000   0.00000    63:}
        0   0.00000   0.00000    64:
        0   0.00000   0.00000    65:# one of two things will happen
        0   0.00000   0.00000    66:# a) one of the existing edges will know how
        0   0.00000   0.00000    67:#    handle this string, in which case we are
        0   0.00000   0.00000    68:# b) _none_ of the existing edges know how to
        0   0.00000   0.00000    69:#    this string, in which case we make a new
        0   0.00000   0.00000    70:#    at this level.
        0   0.00000   0.00000    71:
        0   0.00000   0.00000    72:sub ProcessNewString
        0   0.00000   0.00000    73:{
   270003   0.01517   0.86000    74:    my ($this,$str) = @_;
   270003   0.01060   0.61100    75:    my $found = 0;
        0   0.00000   0.00000    76:
   270003   0.02382   0.66900    77:    for my $edge (@{$this->{EDGES}})
        0   0.00000   0.00000    78:    {
   694181   0.04054   2.12400    79: my $st = $edge->ProcessNewString($str);
   694181   0.03162   2.14700    80: if ($st == 1)
        0   0.00000   0.00000    81: {
   255379   0.00929   0.51400    82:     $found = 1;
   255379   0.01031   0.74900    83:     last;
        0   0.00000   0.00000    84: }
        0   0.00000   0.00000    85:    }
   270003   0.06037   1.13900    86:    if ($found == 0)
        0   0.00000   0.00000    87:    {
        0   0.00000   0.00000    88: $this->AddEdge($str);
        0   0.00000   0.00000    89:    }
        0   0.00000   0.00000    90:}
        0   0.00000   0.00000    91:
        0   0.00000   0.00000    92:sub FindCommonSubstrings
        0   0.00000   0.00000    93:{
        0   0.00000   0.00000    94:    my ($this,$prefix,$resref) = @_;
        0   0.00000   0.00000    95:    for my $edge (@{$this->{EDGES}})
        0   0.00000   0.00000    96:    {
        0   0.00000   0.00000    97: $edge-
        0   0.00000   0.00000    98:    }
        0   0.00000   0.00000    99:}
        0   0.00000   0.00000   100:
        0   0.00000   0.00000   101:sub CountByLength
        0   0.00000   0.00000   102:{
    24043   0.00092   0.06300   103:    my ($this,$length) = @_;
    24043   0.00101   0.04800   104:    my $result;
    24043   0.00199   0.06200   105:    for my $edge (@{$this->{EDGES}})
        0   0.00000   0.00000   106:    {
    62709   0.00321   0.03100   107: $result += $edge->CountByLength();
        0   0.00000   0.00000   108:    }
    24043   0.00520   0.07800   109:    return $result;
        0   0.00000   0.00000   110:}
        0   0.00000   0.00000   111:
        0   0.00000   0.00000   112:
           ================ SmallProf version 2.02 ================
                      Profile of ../common/SuffixTree.pm               Page 9
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000   113:
        0   0.00000   0.00000   114:sub GetLeafCount
        0   0.00000   0.00000   115:{
        0   0.00000   0.00000   116:    my ($this) = @_;
        0   0.00000   0.00000   117:    my $result = 0;
        0   0.00000   0.00000   118:    for my $edge (@{$this->{EDGES}})
        0   0.00000   0.00000   119:    {
        0   0.00000   0.00000   120: $result += $edge->GetLeafCount();
        0   0.00000   0.00000   121:    }
        0   0.00000   0.00000   122:    return $result;
        0   0.00000   0.00000   123:}
        0   0.00000   0.00000   124:
        0   0.00000   0.00000   125:sub Print
        0   0.00000   0.00000   126:{
        0   0.00000   0.00000   127:    my ($this,$indent) = @_;
        0   0.00000   0.00000   128:    for my $edge (@{$this->{EDGES}})
        0   0.00000   0.00000   129:    {
        0   0.00000   0.00000   130: $edge->Print($indent);
        0   0.00000   0.00000   131:    }
        0   0.00000   0.00000   132:}
        0   0.00000   0.00000   133:
        0   0.00000   0.00000   134:sub PrintAllEdges
        0   0.00000   0.00000   135:{
        0   0.00000   0.00000   136:    my ($this) = @_;
        0   0.00000   0.00000   137:    for my $edge (@{$this->{EDGES}})
        0   0.00000   0.00000   138:    {
        0   0.00000   0.00000   139: $edge->PrintAllEdges();
        0   0.00000   0.00000   140:    }
        0   0.00000   0.00000   141:}
        0   0.00000   0.00000   142:
        0   0.00000   0.00000   143:sub AddEdge
        0   0.00000   0.00000   144:{
    62709   0.00299   0.17000   145:    my ($this,$str,$child) = @_;
    62709   0.00406   0.28100   146:    my $ne = new STEdge($str,$child);
    62709   0.01376   0.24800   147:    push @{$this->{EDGES}},$ne;
        0   0.00000   0.00000   148:}
        0   0.00000   0.00000   149:
        0   0.00000   0.00000   150:
        0   0.00000   0.00000   151:
        0   0.00000   0.00000   152:1;
        0   0.00000   0.00000   153:
        0   0.00000   0.00000   154:
           ================ SmallProf version 2.02 ================
                              Profile of ling.pl                       Page 10
       =================================================================
    count wall tm  cpu time line
        0   0.00000   0.00000     1:BEGIN { push @INC,"../common"; }
        0   0.00000   0.00000     2:
        0   0.00000   0.00000     3:use SuffixTree;
        0   0.00000   0.00000     4:use StringWrapper;
        0   0.00000   0.00000     5:use SubString;
        0   0.00000   0.00000     6:
        1   0.00000   0.00000     7:my $sw;
        1   0.00000   0.00000     8:my $olen;
        0   0.00000   0.00000     9:sub LoadFile
        0   0.00000   0.00000    10:{
        1   0.00000   0.00000    11:    my ($name) = @_;
        1   0.00016   0.00000    12:    open (FD,$name) || die("Can't open
        1   0.00037   0.00000    13:    my $str = <FD>;
        1   0.00000   0.00000    14:    $str =~ s/\r?\n$//;
        1   0.00000   0.00000    15:    $olen = length($str);
        1   0.00000   0.00000    16:    $str .= '$' unless $str =~ /\$$/;
        1   0.00000   0.00000    17:    $sw = new StringWrapper($str);
        1   0.00003   0.00000    18:    close FD;
        0   0.00000   0.00000    19:}
        0   0.00000   0.00000    20:
        0   0.00000   0.00000    21:sub min
        0   0.00000   0.00000    22:{
    38667   0.00166   0.14300    23:    my ($a,$b) = @_;
    38667   0.00146   0.15400    24:    return $a < $b ? $a : $b;
        0   0.00000   0.00000    25:}
        0   0.00000   0.00000    26:
        0   0.00000   0.00000    27:
        1   0.00000   0.00000    28:die("bad command line") unless @ARGV;
        1   0.00000   0.00000    29:LoadFile($ARGV[0]);
        0   0.00000   0.00000    30:
        1   0.00022   0.00000    31:print "load complete\n";
        0   0.00000   0.00000    32:
        1   0.00000   0.00000    33:$st = new SuffixTree($sw);
        0   0.00000   0.00000    34:
        1   0.00082   0.00000    35:print "suffixtree complete\n";
        0   0.00000   0.00000    36:
        1   0.00000   0.00000    37:$stotal = $st->CountByLength();
        0   0.00000   0.00000    38:
        1   0.00078   0.00000    39:print "Count by length complete\n";
        0   0.00000   0.00000    40:
        1   0.00000   0.00000    41:my $switch = 0;
        0   0.00000   0.00000    42:
        1   0.00000   0.00000    43:for (my $i = 1 ; $i <= $olen ; ++$i)
        0   0.00000   0.00000    44:{
    38667   0.00135   0.14100    45:    if ($switch == 0)
        0   0.00000   0.00000    46:    {
        8   0.00000   0.00000    47: $perms = 4 ** $i;
        8   0.00000   0.00000    48: $nums = ($olen-$i)+1;
        8   0.00000   0.00000    49: $switch = 1 if ($perms > $nums);
        0   0.00000   0.00000    50:    }
        0   0.00000   0.00000    51:    else
        0   0.00000   0.00000    52:    {
    38659   0.00115   0.12600    53: $nums = ($olen-$i)+1;
    38659   0.00135   0.07900    54: $perms = $nums;
        0   0.00000   0.00000    55:    }
        0   0.00000   0.00000    56:
           ================ SmallProf version 2.02 ================
                              Profile of ling.pl                       Page 11
       =================================================================
    count wall tm  cpu time line
    38667   0.00133   0.10900    57:    $m = min($perms,$nums);
    38667   0.00174   0.10800    58:    $mtotal += $m;
        1   0.00000   0.00000    59:}
        0   0.00000   0.00000    60:
        0   0.00000   0.00000    61:
        1   0.00034   0.00000    62:printf("%.4f\n",$stotal / $mtotal);
        0   0.00000   0.00000    63:
        0   0.00000   0.00000    64:
        0   0.00000   0.00000    65:
        0   0.00000   0.00000    66:
        0   0.00000   0.00000    67:
        0   0.00000   0.00000    68:
        0   0.00000   0.00000    69:
        0   0.00000   0.00000    70:
        0   0.00000   0.00000    71:
        0   0.00000   0.00000    72:
